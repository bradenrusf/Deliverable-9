# -*- coding: utf-8 -*-
"""Deliverable 9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MVgOE4xsgDxEW4w-_o_sRSe0d7dVKBFt

The problem I have chosen is to predict the median house value of houses in the california housing dataset based on median income in the area. Each record in the dataset is a block of houses.
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv('/content/california_housing.csv')
df.head()

plt.figure(figsize = (8, 5))
plt.hist(df['median_house_value'], color = 'Tab:red')
plt.title('California Median House Value', fontsize = 15)
plt.xlabel('Median value of Homes', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.ylabel('Number of Houses', fontsize = 15)
plt.show()

plt.figure(figsize = (8, 5))
plt.scatter(x = df['median_income'], y = df['median_house_value'], color = 'Tab:blue')
plt.xlabel('Median Income', fontsize = 15)
plt.ylabel('Median House Price', fontsize = 15)
plt.show()

"""This is a scatter plot of median house price compared to median income for each block. It is somewhat linearly distributed but one thing to note is that the median home values cap out at 500,001 in the data, meaning areas with homes worth more are not represented accurately in this dataset."""

df.head()

features_names = df.columns.to_list()[:-1]
X = df[features_names] # features
Y = df['median_house_value'] # response or target variable

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

my_linear_regression = LinearRegression()
my_linear_regression.fit(X_train, Y_train)

pred = my_linear_regression.predict(X_test)
pred

plt.figure(figsize = (8, 5))
plt.scatter(x = Y_test, y = pred, color = 'Tab:green')
plt.xlabel('Actual House Price', fontsize = 15)
plt.ylabel('Prediction', fontsize = 15)
plt.show()

"""This is a scatter plot showing the predicted house price compared to the actual house price. As you can see the correlation is mostly linear with a few outliers. Most notably one of the blocks had a predicted median value of around -750,000 and an actual house price of just over 100,000. This is clearly incorrect and I'm not sure but it isthe only value below zero so it could just be a problem with the data."""

print('The model r2 score is: {}'.format(my_linear_regression.score(X_train, Y_train)))

print('The intercept (b_0) is  {}'.format(my_linear_regression.intercept_))
for i in range(len(features_names)):
  print('The coef (b_{}) is  {}'.format(i+1, my_linear_regression.coef_[i]))

print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, pred))
print('Mean Squared Error:', metrics.mean_squared_error(Y_test, pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, pred)))
def MAPE(Y, pred): # MAPE: Mean Abs Percentage Error
  l1 = list(Y)
  l2 = list(pred)
  er = []
  for i in range(len(l1)):
    e = np.abs(l1[i]-l2[i])
    er.append(e/l1[i])
  return np.mean(er)
print('MAPE:', MAPE(Y_test, pred)*100, "%")

scaler = MinMaxScaler()
data_norm = scaler.fit_transform(df)
df_norm = pd.DataFrame(data_norm, columns = df.columns.to_list())

df_norm.head()

plt.figure(figsize = (8, 5))
plt.hist(df_norm.median_house_value, color = 'Tab:purple')
plt.title('California Housing Prices Histogram', fontsize = 15)
plt.xlabel('Median value of Homes', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.ylabel('Number of Houses', fontsize = 15)
plt.show()

scaler = MinMaxScaler()
data_norm = scaler.fit_transform(df)
df_norm = pd.DataFrame(data_norm, columns = df.columns.to_list())

my_linear_regression = LinearRegression()
X = df_norm[features_names] # features
Y = df_norm['median_house_value'] # response or target variable
my_linear_regression.fit(X, Y)

summary = pd.DataFrame({'Features':features_names, 'Scores':my_linear_regression.coef_})
summary

plt.figure(figsize = (16, 5))
# plot feature importance with a bar chart
plt.bar(x = summary['Features'], height = summary['Scores'] , color = 'Tab:gray') 
plt.title('California Housing Prices Histogram', fontsize = 15)
plt.xlabel('Features', fontsize = 15, )
plt.ylabel('Importance Score', fontsize = 15)
plt.show()

"""Based on the results of the linear regression, the attribute with the highest importance score that influcences the median income is total bedrooms, followed closely by median income. Population had the lowest importance score."""